{"version":3,"file":"textfield.min.js","sources":["../../components/base/custom-element.js","../../components/base/custom-icon.js","../../components/base/dispatch-focus-mixin.js","../../node_modules/@material/base/foundation.js","../../node_modules/@material/line-ripple/constants.js","../../node_modules/@material/line-ripple/adapter.js","../../node_modules/@material/line-ripple/foundation.js","../../node_modules/@material/textfield/helper-text/constants.js","../../node_modules/@material/textfield/helper-text/adapter.js","../../node_modules/@material/textfield/helper-text/foundation.js","../../node_modules/@material/textfield/icon/constants.js","../../node_modules/@material/textfield/icon/adapter.js","../../node_modules/@material/textfield/icon/foundation.js","../../node_modules/@material/textfield/label/constants.js","../../node_modules/@material/textfield/label/adapter.js","../../node_modules/@material/textfield/label/foundation.js","../../node_modules/@material/textfield/outline/constants.js","../../node_modules/@material/textfield/outline/adapter.js","../../node_modules/@material/textfield/outline/foundation.js","../../node_modules/@material/textfield/constants.js","../../node_modules/@material/textfield/adapter.js","../../node_modules/@material/textfield/foundation.js","../../node_modules/@material/ripple/constants.js","../../node_modules/@material/ripple/adapter.js","../../node_modules/@material/ripple/util.js","../../node_modules/@material/ripple/foundation.js","../../components/base/base-plugin.js","../../components/ripple/mdc-ripple-base.js","../../components/textfield/mdc-textfield.vue","../../components/base/auto-init.js","../../components/textfield/entry.js"],"sourcesContent":["export const CustomElement = {\n  functional: true,\n  render (createElement, context) {\n    return createElement(\n      context.props.is || context.props.tag || 'div', \n      context.data,\n      context.children)\n  }\n}\n\nexport const CustomElementMixin = {\n  components: {\n    CustomElement\n  }\n}\n","export function extractIconProp (iconProp) {\n    if (typeof iconProp === 'string') {\n      return {\n        classes: { 'material-icons' : true},\n        content: iconProp \n      }\n    }\n    else if (iconProp instanceof Array){\n      return { \n        classes: iconProp.reduce(\n          (result, value) => Object.assign(result,{[value]:true}),\n          {}),\n        }\n    }\n    else if (typeof iconProp === 'object'){\n      return { \n        classes: iconProp.className.split(' ').reduce(\n          (result, value) => Object.assign(result,{[value]:true}),\n          {}),\n        content: iconProp.textContent \n      }\n    }\n  }\n","export const DispatchFocusMixin = {\n  data () {\n    return  {hasFocus: false}\n  },\n  methods: {\n    onMouseDown() {\n      this._active = true\n    },\n    onMouseUp () {\n      this._active = false\n    },\n    onFocusEvent () {\n      // dispatch async to let time to other focus event to propagate\n      setTimeout(() => this.dispatchFocusEvent(),0)\n    },\n    onBlurEvent () {\n      // dispatch async to let time to other focus event to propagate\n      // also filtur blur if mousedown\n      this._active || setTimeout(() => this.dispatchFocusEvent(),0)\n    },\n    dispatchFocusEvent() {\n      let hasFocus = this.$el === document.activeElement || this.$el.contains(document.activeElement);\n      if (hasFocus != this.hasFocus) {\n        this.$emit(hasFocus ? 'focus' : 'blur')\n        this.hasFocus = hasFocus\n      }\n    }\n  },\n  mounted () {\n    this.$el.addEventListener('focusin', this.onFocusEvent)\n    this.$el.addEventListener('focusout', this.onBlurEvent)\n    this.$el.addEventListener('mousedown', this.onMouseDown)\n    this.$el.addEventListener('mouseup', this.onMouseUp)\n  },\n  beforeDestroy () {\n    this.$el.removeEventListener('focusin', this.onFocusEvent)\n    this.$el.removeEventListener('focusout', this.onBlurEvent)\n    this.$el.removeEventListener('mousedown', this.onMouseDown)\n    this.$el.removeEventListener('mouseup', this.onMouseUp)\n  }\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @template A\n */\nclass MDCFoundation {\n  /** @return enum{cssClasses} */\n  static get cssClasses() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports every\n    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n    return {};\n  }\n\n  /** @return enum{strings} */\n  static get strings() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n    return {};\n  }\n\n  /** @return enum{numbers} */\n  static get numbers() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n    return {};\n  }\n\n  /** @return {!Object} */\n  static get defaultAdapter() {\n    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n    // validation.\n    return {};\n  }\n\n  /**\n   * @param {A=} adapter\n   */\n  constructor(adapter = {}) {\n    /** @protected {!A} */\n    this.adapter_ = adapter;\n  }\n\n  init() {\n    // Subclasses should override this method to perform initialization routines (registering events, etc.)\n  }\n\n  destroy() {\n    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)\n  }\n}\n\nexport default MDCFoundation;\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  LINE_RIPPLE_ACTIVE: 'mdc-line-ripple--active',\n  LINE_RIPPLE_DEACTIVATING: 'mdc-line-ripple--deactivating',\n};\n\nexport {cssClasses};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC TextField Line Ripple.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the line ripple into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCLineRippleAdapter {\n  /**\n   * Adds a class to the line ripple element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the line ripple element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Sets an attribute with a given value on the line ripple element.\n   * @param {string} attr\n   * @param {string} value\n   */\n  setAttr(attr, value) {}\n\n  /**\n   * Registers an event listener on the line ripple element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  registerEventHandler(evtType, handler) {}\n\n  /**\n   * Deregisters an event listener on the line ripple element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterEventHandler(evtType, handler) {}\n}\n\nexport default MDCLineRippleAdapter;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCLineRippleAdapter from './adapter';\nimport {cssClasses} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCLineRippleAdapter>}\n * @final\n */\nclass MDCLineRippleFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /**\n   * {@see MDCLineRippleAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCLineRippleAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCLineRippleAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      hasClass: () => {},\n      setAttr: () => {},\n      registerEventHandler: () => {},\n      deregisterEventHandler: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCLineRippleAdapter=} adapter\n   */\n  constructor(adapter = /** @type {!MDCLineRippleAdapter} */ ({})) {\n    super(Object.assign(MDCLineRippleFoundation.defaultAdapter, adapter));\n\n    /** @private {function(!Event): undefined} */\n    this.transitionEndHandler_ = (evt) => this.handleTransitionEnd(evt);\n  }\n\n  init() {\n    this.adapter_.registerEventHandler('transitionend', this.transitionEndHandler_);\n  }\n\n  destroy() {\n    this.adapter_.deregisterEventHandler('transitionend', this.transitionEndHandler_);\n  }\n\n  /**\n   * Activates the line ripple\n   */\n  activate() {\n    this.adapter_.removeClass(cssClasses.LINE_RIPPLE_DEACTIVATING);\n    this.adapter_.addClass(cssClasses.LINE_RIPPLE_ACTIVE);\n  }\n\n  /**\n   * Sets the center of the ripple animation to the given X coordinate.\n   * @param {!number} xCoordinate\n   */\n  setRippleCenter(xCoordinate) {\n    const attributeString =\n        `transform-origin: ${xCoordinate}px center`;\n\n    this.adapter_.setAttr('style', attributeString);\n  }\n\n  /**\n   * Deactivates the line ripple\n   */\n  deactivate() {\n    this.adapter_.addClass(cssClasses.LINE_RIPPLE_DEACTIVATING);\n  }\n\n  /**\n   * Handles a transition end event\n   * @param {!Event} evt\n   */\n  handleTransitionEnd(evt) {\n    // Wait for the line ripple to be either transparent or opaque\n    // before emitting the animation end event\n    const isDeactivating = this.adapter_.hasClass(cssClasses.LINE_RIPPLE_DEACTIVATING);\n\n    if (evt.propertyName === 'opacity') {\n      if (isDeactivating) {\n        this.adapter_.removeClass(cssClasses.LINE_RIPPLE_ACTIVE);\n        this.adapter_.removeClass(cssClasses.LINE_RIPPLE_DEACTIVATING);\n      }\n    }\n  }\n}\n\nexport default MDCLineRippleFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @enum {string} */\nconst strings = {\n  ARIA_HIDDEN: 'aria-hidden',\n  ROLE: 'role',\n};\n\n/** @enum {string} */\nconst cssClasses = {\n  HELPER_TEXT_PERSISTENT: 'mdc-text-field-helper-text--persistent',\n  HELPER_TEXT_VALIDATION_MSG: 'mdc-text-field-helper-text--validation-msg',\n};\n\nexport {strings, cssClasses};\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Text Field Helper Text.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the TextField helper text into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCTextFieldHelperTextAdapter {\n  /**\n   * Adds a class to the helper text element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the helper text element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Returns whether or not the helper text element contains the given class.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Sets an attribute with a given value on the helper text element.\n   * @param {string} attr\n   * @param {string} value\n   */\n  setAttr(attr, value) {}\n\n  /**\n   * Removes an attribute from the helper text element.\n   * @param {string} attr\n   */\n  removeAttr(attr) {}\n\n  /**\n   * Sets the text content for the helper text element.\n   * @param {string} content\n   */\n  setContent(content) {}\n}\n\nexport default MDCTextFieldHelperTextAdapter;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCTextFieldHelperTextAdapter from './adapter';\nimport {cssClasses, strings} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCTextFieldHelperTextAdapter>}\n * @final\n */\nclass MDCTextFieldHelperTextFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /**\n   * {@see MDCTextFieldHelperTextAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCTextFieldHelperTextAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCTextFieldHelperTextAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      hasClass: () => {},\n      setAttr: () => {},\n      removeAttr: () => {},\n      setContent: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCTextFieldHelperTextAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCTextFieldHelperTextFoundation.defaultAdapter, adapter));\n  }\n\n  /**\n   * Sets the content of the helper text field.\n   * @param {string} content\n   */\n  setContent(content) {\n    this.adapter_.setContent(content);\n  }\n\n  /** @param {boolean} isPersistent Sets the persistency of the helper text. */\n  setPersistent(isPersistent) {\n    if (isPersistent) {\n      this.adapter_.addClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    } else {\n      this.adapter_.removeClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    }\n  }\n\n  /**\n   * @param {boolean} isValidation True to make the helper text act as an\n   *   error validation message.\n   */\n  setValidation(isValidation) {\n    if (isValidation) {\n      this.adapter_.addClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    } else {\n      this.adapter_.removeClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    }\n  }\n\n  /** Makes the helper text visible to the screen reader. */\n  showToScreenReader() {\n    this.adapter_.removeAttr(strings.ARIA_HIDDEN);\n  }\n\n  /**\n   * Sets the validity of the helper text based on the input validity.\n   * @param {boolean} inputIsValid\n   */\n  setValidity(inputIsValid) {\n    const helperTextIsPersistent = this.adapter_.hasClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    const helperTextIsValidationMsg = this.adapter_.hasClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    const validationMsgNeedsDisplay = helperTextIsValidationMsg && !inputIsValid;\n\n    if (validationMsgNeedsDisplay) {\n      this.adapter_.setAttr(strings.ROLE, 'alert');\n    } else {\n      this.adapter_.removeAttr(strings.ROLE);\n    }\n\n    if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {\n      this.hide_();\n    }\n  }\n\n  /**\n   * Hides the help text from screen readers.\n   * @private\n   */\n  hide_() {\n    this.adapter_.setAttr(strings.ARIA_HIDDEN, 'true');\n  }\n}\n\nexport default MDCTextFieldHelperTextFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @enum {string} */\nconst strings = {\n  ICON_EVENT: 'MDCTextField:icon',\n};\n\nexport {strings};\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Text Field Icon.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the text field icon into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCTextFieldIconAdapter {\n  /**\n   * Sets an attribute on the icon element.\n   * @param {string} attr\n   * @param {string} value\n   */\n  setAttr(attr, value) {}\n\n  /**\n   * Registers an event listener on the icon element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  registerInteractionHandler(evtType, handler) {}\n\n  /**\n   * Deregisters an event listener on the icon element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterInteractionHandler(evtType, handler) {}\n\n  /**\n   * Emits a custom event \"MDCTextField:icon\" denoting a user has clicked the icon.\n   */\n  notifyIconAction() {}\n}\n\nexport default MDCTextFieldIconAdapter;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCTextFieldIconAdapter from './adapter';\nimport {strings} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCTextFieldIconAdapter>}\n * @final\n */\nclass MDCTextFieldIconFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /**\n   * {@see MDCTextFieldIconAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCTextFieldIconAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCTextFieldIconAdapter} */ ({\n      setAttr: () => {},\n      registerInteractionHandler: () => {},\n      deregisterInteractionHandler: () => {},\n      notifyIconAction: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCTextFieldIconAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCTextFieldIconFoundation.defaultAdapter, adapter));\n\n    /** @private {function(!Event): undefined} */\n    this.interactionHandler_ = (evt) => this.handleInteraction(evt);\n  }\n\n  init() {\n    ['click', 'keydown'].forEach((evtType) => {\n      this.adapter_.registerInteractionHandler(evtType, this.interactionHandler_);\n    });\n  }\n\n  destroy() {\n    ['click', 'keydown'].forEach((evtType) => {\n      this.adapter_.deregisterInteractionHandler(evtType, this.interactionHandler_);\n    });\n  }\n\n  /**\n   * Sets the content of the helper text field.\n   * @param {boolean} disabled\n   */\n  setDisabled(disabled) {\n    if (disabled) {\n      this.adapter_.setAttr('tabindex', '-1');\n    } else {\n      this.adapter_.setAttr('tabindex', '0');\n    }\n  }\n\n  /**\n   * Handles an interaction event\n   * @param {!Event} evt\n   */\n  handleInteraction(evt) {\n    if (evt.type === 'click' || evt.key === 'Enter' || evt.keyCode === 13) {\n      this.adapter_.notifyIconAction();\n    }\n  }\n}\n\nexport default MDCTextFieldIconFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  LABEL_FLOAT_ABOVE: 'mdc-text-field__label--float-above',\n  LABEL_SHAKE: 'mdc-text-field__label--shake',\n};\n\nexport {cssClasses};\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Text Field Label.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Text Field label into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCTextFieldLabelAdapter {\n  /**\n   * Adds a class to the label element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the label element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Returns the width of the label element.\n   * @return {number}\n   */\n  getWidth() {}\n}\n\nexport default MDCTextFieldLabelAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCTextFieldLabelAdapter from './adapter';\nimport {cssClasses} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCTextFieldLabelAdapter>}\n * @final\n */\nclass MDCTextFieldLabelFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /**\n   * {@see MDCTextFieldLabelAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCTextFieldLabelAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCTextFieldLabelAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      getWidth: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCTextFieldLabelAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCTextFieldLabelFoundation.defaultAdapter, adapter));\n  }\n\n  /**\n   * Returns the width of the label element.\n   * @return {number}\n   */\n  getWidth() {\n    return this.adapter_.getWidth();\n  }\n\n  /**\n   * Styles the label to produce the label shake for errors.\n   * @param {boolean} isValid Whether the input's value is valid (passes all\n   *     validity checks).\n   * @param {boolean} isFocused Whether the input is focused.\n   */\n  styleShake(isValid, isFocused) {\n    const {LABEL_SHAKE} = MDCTextFieldLabelFoundation.cssClasses;\n    if (isValid || isFocused) {\n      this.adapter_.removeClass(LABEL_SHAKE);\n    } else {\n      this.adapter_.addClass(LABEL_SHAKE);\n    }\n  }\n\n  /**\n   * Styles the label to float or defloat as necessary.\n   * @param {string} value The value of the input.\n   * @param {boolean} isFocused Whether the input is focused.\n   * @param {boolean} isBadInput The input's `validity.badInput` value.\n   */\n  styleFloat(value, isFocused, isBadInput) {\n    const {LABEL_FLOAT_ABOVE, LABEL_SHAKE} = MDCTextFieldLabelFoundation.cssClasses;\n    if (!!value || isFocused) {\n      this.adapter_.addClass(LABEL_FLOAT_ABOVE);\n    } else if (!isBadInput) {\n      this.adapter_.removeClass(LABEL_FLOAT_ABOVE);\n      this.adapter_.removeClass(LABEL_SHAKE);\n    }\n  }\n}\n\nexport default MDCTextFieldLabelFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @enum {string} */\nconst strings = {\n  PATH_SELECTOR: '.mdc-text-field__outline-path',\n  IDLE_OUTLINE_SELECTOR: '.mdc-text-field__idle-outline',\n};\n\nexport {strings};\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Text Field Outline.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Text Field outline into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCTextFieldOutlineAdapter {\n  /**\n   * Returns the width of the root element.\n   * @return {number}\n   */\n  getWidth() {}\n\n  /**\n   * Returns the height of the root element.\n   * @return {number}\n   */\n  getHeight() {}\n\n  /**\n   * Sets the \"d\" attribute of the outline element's SVG path.\n   * @param {string} value\n   */\n  setOutlinePathAttr(value) {}\n\n  /**\n   * Returns the idle outline element's computed style value of the given css property `propertyName`.\n   * We achieve this via `getComputedStyle(...).getPropertyValue(propertyName)`.\n   * @param {string} propertyName\n   * @return {string}\n   */\n  getIdleOutlineStyleValue(propertyName) {}\n}\n\nexport default MDCTextFieldOutlineAdapter;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCTextFieldOutlineAdapter from './adapter';\nimport {strings} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCTextFieldOutlineAdapter>}\n * @final\n */\nclass MDCTextFieldOutlineFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /**\n   * {@see MDCTextFieldOutlineAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCTextFieldOutlineAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCTextFieldOutlineAdapter} */ ({\n      getWidth: () => {},\n      getHeight: () => {},\n      setOutlinePathAttr: () => {},\n      getIdleOutlineStyleValue: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCTextFieldOutlineAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCTextFieldOutlineFoundation.defaultAdapter, adapter));\n  }\n\n  /**\n   * Updates the SVG path of the focus outline element based on the given width of the\n   * label element and the RTL context.\n   * @param {number} labelWidth\n   * @param {boolean=} isRtl\n   */\n  updateSvgPath(labelWidth, isRtl = false) {\n    // Fall back to reading a specific corner's style because Firefox doesn't report the style on border-radius.\n    const radiusStyleValue = this.adapter_.getIdleOutlineStyleValue('border-radius') ||\n        this.adapter_.getIdleOutlineStyleValue('border-top-left-radius');\n    const radius = parseFloat(radiusStyleValue);\n    const width = this.adapter_.getWidth();\n    const height = this.adapter_.getHeight();\n    const cornerWidth = radius + 1.2;\n    const leadingStrokeLength = Math.abs(11 - cornerWidth);\n    const paddedLabelWidth = labelWidth + 8;\n\n    // The right, bottom, and left sides of the outline follow the same SVG path.\n    const pathMiddle = 'a' + radius + ',' + radius + ' 0 0 1 ' + radius + ',' + radius\n      + 'v' + (height - (2 * cornerWidth))\n      + 'a' + radius + ',' + radius + ' 0 0 1 ' + -radius + ',' + radius\n      + 'h' + (-width + (2 * cornerWidth))\n      + 'a' + radius + ',' + radius + ' 0 0 1 ' + -radius + ',' + -radius\n      + 'v' + (-height + (2 * cornerWidth))\n      + 'a' + radius + ',' + radius + ' 0 0 1 ' + radius + ',' + -radius;\n\n    let path;\n    if (!isRtl) {\n      path = 'M' + (cornerWidth + leadingStrokeLength + paddedLabelWidth) + ',' + 1\n        + 'h' + (width - (2 * cornerWidth) - paddedLabelWidth - leadingStrokeLength)\n        + pathMiddle\n        + 'h' + leadingStrokeLength;\n    } else {\n      path = 'M' + (width - cornerWidth - leadingStrokeLength) + ',' + 1\n        + 'h' + leadingStrokeLength\n        + pathMiddle\n        + 'h' + (width - (2 * cornerWidth) - paddedLabelWidth - leadingStrokeLength);\n    }\n\n    this.adapter_.setOutlinePathAttr(path);\n  }\n}\n\nexport default MDCTextFieldOutlineFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @enum {string} */\nconst strings = {\n  ARIA_CONTROLS: 'aria-controls',\n  INPUT_SELECTOR: '.mdc-text-field__input',\n  LABEL_SELECTOR: '.mdc-text-field__label',\n  ICON_SELECTOR: '.mdc-text-field__icon',\n  OUTLINE_SELECTOR: '.mdc-text-field__outline',\n  BOTTOM_LINE_SELECTOR: '.mdc-line-ripple',\n};\n\n/** @enum {string} */\nconst cssClasses = {\n  ROOT: 'mdc-text-field',\n  UPGRADED: 'mdc-text-field--upgraded',\n  DISABLED: 'mdc-text-field--disabled',\n  DENSE: 'mdc-text-field--dense',\n  FOCUSED: 'mdc-text-field--focused',\n  INVALID: 'mdc-text-field--invalid',\n  BOX: 'mdc-text-field--box',\n  OUTLINED: 'mdc-text-field--outlined',\n};\n\n/** @enum {number} */\nconst numbers = {\n  LABEL_SCALE: 0.75,\n  DENSE_LABEL_SCALE: 0.923,\n};\n\nexport {cssClasses, strings, numbers};\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-unused-vars */\nimport MDCLineRippleFoundation from '@material/line-ripple/foundation';\nimport MDCTextFieldHelperTextFoundation from './helper-text/foundation';\nimport MDCTextFieldIconFoundation from './icon/foundation';\nimport MDCTextFieldLabelFoundation from './label/foundation';\nimport MDCTextFieldOutlineFoundation from './outline/foundation';\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * @typedef {{\n *   value: string,\n *   disabled: boolean,\n *   badInput: boolean,\n *   validity: {\n *     badInput: boolean,\n *     valid: boolean,\n *   },\n * }}\n */\nlet NativeInputType;\n\n/**\n * @typedef {{\n *   lineRipple: (!MDCLineRippleFoundation|undefined),\n *   helperText: (!MDCTextFieldHelperTextFoundation|undefined),\n *   icon: (!MDCTextFieldIconFoundation|undefined),\n *   label: (!MDCTextFieldLabelFoundation|undefined),\n *   outline: (!MDCTextFieldOutlineFoundation|undefined)\n * }}\n */\nlet FoundationMapType;\n\n/**\n * Adapter for MDC Text Field.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Text Field into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCTextFieldAdapter {\n  /**\n   * Adds a class to the root Element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the root Element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Returns true if the root element contains the given class name.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Registers an event handler on the root element for a given event.\n   * @param {string} type\n   * @param {function(!Event): undefined} handler\n   */\n  registerTextFieldInteractionHandler(type, handler) {}\n\n  /**\n   * Deregisters an event handler on the root element for a given event.\n   * @param {string} type\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterTextFieldInteractionHandler(type, handler) {}\n\n  /**\n   * Registers an event listener on the native input element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  registerInputInteractionHandler(evtType, handler) {}\n\n  /**\n   * Deregisters an event listener on the native input element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterInputInteractionHandler(evtType, handler) {}\n\n  /**\n   * Returns an object representing the native text input element, with a\n   * similar API shape. The object returned should include the value, disabled\n   * and badInput properties, as well as the checkValidity() function. We never\n   * alter the value within our code, however we do update the disabled\n   * property, so if you choose to duck-type the return value for this method\n   * in your implementation it's important to keep this in mind. Also note that\n   * this method can return null, which the foundation will handle gracefully.\n   * @return {?Element|?NativeInputType}\n   */\n  getNativeInput() {}\n\n  /**\n   * Returns true if the textfield is focused.\n   * We achieve this via `document.activeElement === this.root_`.\n   * @return {boolean}\n   */\n  isFocused() {}\n\n  /**\n   * Returns true if the direction of the root element is set to RTL.\n   * @return {boolean}\n   */\n  isRtl() {}\n\n  /**\n   * Activates the line ripple.\n   */\n  activateLineRipple() {}\n\n  /**\n   * Deactivates the line ripple.\n   */\n  deactivateLineRipple() {}\n\n  /**\n   * Sets the transform origin of the line ripple.\n   * @param {number} normalizedX\n   */\n  setLineRippleTransformOrigin(normalizedX) {}\n}\n\nexport {MDCTextFieldAdapter, NativeInputType, FoundationMapType};\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport {MDCTextFieldAdapter, NativeInputType, FoundationMapType} from './adapter';\n/* eslint-disable no-unused-vars */\nimport MDCLineRippleFoundation from '@material/line-ripple/foundation';\nimport MDCTextFieldHelperTextFoundation from './helper-text/foundation';\nimport MDCTextFieldIconFoundation from './icon/foundation';\nimport MDCTextFieldLabelFoundation from './label/foundation';\nimport MDCTextFieldOutlineFoundation from './outline/foundation';\n/* eslint-enable no-unused-vars */\nimport {cssClasses, strings, numbers} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCTextFieldAdapter>}\n * @final\n */\nclass MDCTextFieldFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {string} */\n  static get numbers() {\n    return numbers;\n  }\n\n  /**\n   * {@see MDCTextFieldAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCTextFieldAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCTextFieldAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      hasClass: () => {},\n      registerTextFieldInteractionHandler: () => {},\n      deregisterTextFieldInteractionHandler: () => {},\n      registerInputInteractionHandler: () => {},\n      deregisterInputInteractionHandler: () => {},\n      getNativeInput: () => {},\n      isFocused: () => {},\n      isRtl: () => {},\n      activateLineRipple: () => {},\n      deactivateLineRipple: () => {},\n      setLineRippleTransformOrigin: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCTextFieldAdapter} adapter\n   * @param {!FoundationMapType=} foundationMap Map from subcomponent names to their subfoundations.\n   */\n  constructor(adapter, foundationMap = /** @type {!FoundationMapType} */ ({})) {\n    super(Object.assign(MDCTextFieldFoundation.defaultAdapter, adapter));\n\n    /** @type {!MDCTextFieldHelperTextFoundation|undefined} */\n    this.helperText_ = foundationMap.helperText;\n    /** @type {!MDCTextFieldIconFoundation|undefined} */\n    this.icon_ = foundationMap.icon;\n    /** @type {!MDCTextFieldLabelFoundation|undefined} */\n    this.label_ = foundationMap.label;\n    /** @type {!MDCTextFieldOutlineFoundation|undefined} */\n    this.outline_ = foundationMap.outline;\n\n    /** @private {boolean} */\n    this.isFocused_ = false;\n    /** @private {boolean} */\n    this.receivedUserInput_ = false;\n    /** @private {boolean} */\n    this.useCustomValidityChecking_ = false;\n    /** @private {boolean} */\n    this.isValid_ = true;\n    /** @private {function(): undefined} */\n    this.inputFocusHandler_ = () => this.activateFocus();\n    /** @private {function(): undefined} */\n    this.inputBlurHandler_ = () => this.deactivateFocus();\n    /** @private {function(): undefined} */\n    this.inputInputHandler_ = () => this.autoCompleteFocus();\n    /** @private {function(!Event): undefined} */\n    this.setPointerXOffset_ = (evt) => this.setTransformOrigin(evt);\n    /** @private {function(!Event): undefined} */\n    this.textFieldInteractionHandler_ = () => this.handleTextFieldInteraction();\n  }\n\n  init() {\n    this.adapter_.addClass(MDCTextFieldFoundation.cssClasses.UPGRADED);\n    // Ensure label does not collide with any pre-filled value.\n    if (this.label_ && this.getValue()) {\n      this.label_.styleFloat(\n        this.getValue(), this.isFocused_, this.isBadInput_());\n    }\n\n    if (this.adapter_.isFocused()) {\n      this.inputFocusHandler_();\n    }\n\n    this.adapter_.registerInputInteractionHandler('focus', this.inputFocusHandler_);\n    this.adapter_.registerInputInteractionHandler('blur', this.inputBlurHandler_);\n    this.adapter_.registerInputInteractionHandler('input', this.inputInputHandler_);\n    ['mousedown', 'touchstart'].forEach((evtType) => {\n      this.adapter_.registerInputInteractionHandler(evtType, this.setPointerXOffset_);\n    });\n    ['click', 'keydown'].forEach((evtType) => {\n      this.adapter_.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler_);\n    });\n  }\n\n  destroy() {\n    this.adapter_.removeClass(MDCTextFieldFoundation.cssClasses.UPGRADED);\n    this.adapter_.deregisterInputInteractionHandler('focus', this.inputFocusHandler_);\n    this.adapter_.deregisterInputInteractionHandler('blur', this.inputBlurHandler_);\n    this.adapter_.deregisterInputInteractionHandler('input', this.inputInputHandler_);\n    ['mousedown', 'touchstart'].forEach((evtType) => {\n      this.adapter_.deregisterInputInteractionHandler(evtType, this.setPointerXOffset_);\n    });\n    ['click', 'keydown'].forEach((evtType) => {\n      this.adapter_.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler_);\n    });\n  }\n\n  /**\n   * Handles user interactions with the Text Field.\n   */\n  handleTextFieldInteraction() {\n    if (this.adapter_.getNativeInput().disabled) {\n      return;\n    }\n    this.receivedUserInput_ = true;\n  }\n\n  /**\n   * Updates the focus outline for outlined text fields.\n   */\n  updateOutline() {\n    if (!this.outline_ || !this.label_) {\n      return;\n    }\n\n    const isDense = this.adapter_.hasClass(cssClasses.DENSE);\n    const labelScale = isDense ? numbers.DENSE_LABEL_SCALE : numbers.LABEL_SCALE;\n    const labelWidth = this.label_.getWidth() * labelScale;\n    const isRtl = this.adapter_.isRtl();\n    this.outline_.updateSvgPath(labelWidth, isRtl);\n  }\n\n  /**\n   * Activates the text field focus state.\n   */\n  activateFocus() {\n    this.isFocused_ = true;\n    this.styleFocused_(this.isFocused_);\n    this.adapter_.activateLineRipple();\n    if (this.outline_) {\n      this.updateOutline();\n    }\n    if (this.label_) {\n      this.label_.styleShake(this.isValid(), this.isFocused_);\n      this.label_.styleFloat(\n        this.getValue(), this.isFocused_, this.isBadInput_());\n    }\n    if (this.helperText_) {\n      this.helperText_.showToScreenReader();\n    }\n  }\n\n  /**\n   * Sets the line ripple's transform origin, so that the line ripple activate\n   * animation will animate out from the user's click location.\n   * @param {!Event} evt\n   */\n  setTransformOrigin(evt) {\n    const targetClientRect = evt.target.getBoundingClientRect();\n    const evtCoords = {x: evt.clientX, y: evt.clientY};\n    const normalizedX = evtCoords.x - targetClientRect.left;\n    this.adapter_.setLineRippleTransformOrigin(normalizedX);\n  }\n\n  /**\n   * Activates the Text Field's focus state in cases when the input value\n   * changes without user input (e.g. programatically).\n   */\n  autoCompleteFocus() {\n    if (!this.receivedUserInput_) {\n      this.activateFocus();\n    }\n  }\n\n  /**\n   * Deactivates the Text Field's focus state.\n   */\n  deactivateFocus() {\n    this.isFocused_ = false;\n    this.adapter_.deactivateLineRipple();\n    const input = this.getNativeInput_();\n    const shouldRemoveLabelFloat = !input.value && !this.isBadInput_();\n    const isValid = this.isValid();\n    this.styleValidity_(isValid);\n    this.styleFocused_(this.isFocused_);\n    if (this.label_) {\n      this.label_.styleShake(this.isValid(), this.isFocused_);\n      this.label_.styleFloat(\n        this.getValue(), this.isFocused_, this.isBadInput_());\n    }\n    if (shouldRemoveLabelFloat) {\n      this.receivedUserInput_ = false;\n    }\n  }\n\n  /**\n   * @return {string} The value of the input Element.\n   */\n  getValue() {\n    return this.getNativeInput_().value;\n  }\n\n  /**\n   * @param {string} value The value to set on the input Element.\n   */\n  setValue(value) {\n    this.getNativeInput_().value = value;\n    const isValid = this.isValid();\n    this.styleValidity_(isValid);\n    if (this.label_) {\n      this.label_.styleShake(isValid, this.isFocused_);\n      this.label_.styleFloat(\n        this.getValue(), this.isFocused_, this.isBadInput_());\n    }\n  }\n\n  /**\n   * @return {boolean} If a custom validity is set, returns that value.\n   *     Otherwise, returns the result of native validity checks.\n   */\n  isValid() {\n    return this.useCustomValidityChecking_\n      ? this.isValid_ : this.isNativeInputValid_();\n  }\n\n  /**\n   * @param {boolean} isValid Sets the validity state of the Text Field.\n   */\n  setValid(isValid) {\n    this.useCustomValidityChecking_ = true;\n    this.isValid_ = isValid;\n    // Retrieve from the getter to ensure correct logic is applied.\n    isValid = this.isValid();\n    this.styleValidity_(isValid);\n    if (this.label_) {\n      this.label_.styleShake(isValid, this.isFocused_);\n    }\n  }\n\n  /**\n   * @return {boolean} True if the Text Field is disabled.\n   */\n  isDisabled() {\n    return this.getNativeInput_().disabled;\n  }\n\n  /**\n   * @param {boolean} disabled Sets the text-field disabled or enabled.\n   */\n  setDisabled(disabled) {\n    this.getNativeInput_().disabled = disabled;\n    this.styleDisabled_(disabled);\n  }\n\n  /**\n   * @return {boolean} True if the Text Field is required.\n   */\n  isRequired() {\n    return this.getNativeInput_().required;\n  }\n\n  /**\n   * @param {boolean} isRequired Sets the text-field required or not.\n   */\n  setRequired(isRequired) {\n    this.getNativeInput_().required = isRequired;\n    // Addition of the asterisk is automatic based on CSS, but validity checking\n    // needs to be manually run.\n    this.styleValidity_(this.isValid());\n  }\n\n  /**\n   * @param {string} content Sets the content of the helper text.\n   */\n  setHelperTextContent(content) {\n    if (this.helperText_) {\n      this.helperText_.setContent(content);\n    }\n  }\n\n  /**\n   * @return {boolean} True if the Text Field input fails in converting the\n   *     user-supplied value.\n   * @private\n   */\n  isBadInput_() {\n    return this.getNativeInput_().validity.badInput;\n  }\n\n  /**\n   * @return {boolean} The result of native validity checking\n   *     (ValidityState.valid).\n   */\n  isNativeInputValid_() {\n    return this.getNativeInput_().validity.valid;\n  }\n\n  /**\n   * Styles the component based on the validity state.\n   * @param {boolean} isValid\n   * @private\n   */\n  styleValidity_(isValid) {\n    const {INVALID} = MDCTextFieldFoundation.cssClasses;\n    if (isValid) {\n      this.adapter_.removeClass(INVALID);\n    } else {\n      this.adapter_.addClass(INVALID);\n    }\n    if (this.helperText_) {\n      this.helperText_.setValidity(isValid);\n    }\n  }\n\n  /**\n   * Styles the component based on the focused state.\n   * @param {boolean} isFocused\n   * @private\n   */\n  styleFocused_(isFocused) {\n    const {FOCUSED} = MDCTextFieldFoundation.cssClasses;\n    if (isFocused) {\n      this.adapter_.addClass(FOCUSED);\n    } else {\n      this.adapter_.removeClass(FOCUSED);\n    }\n  }\n\n  /**\n   * Styles the component based on the disabled state.\n   * @param {boolean} isDisabled\n   * @private\n   */\n  styleDisabled_(isDisabled) {\n    const {DISABLED, INVALID} = MDCTextFieldFoundation.cssClasses;\n    if (isDisabled) {\n      this.adapter_.addClass(DISABLED);\n      this.adapter_.removeClass(INVALID);\n    } else {\n      this.adapter_.removeClass(DISABLED);\n    }\n    if (this.icon_) {\n      this.icon_.setDisabled(isDisabled);\n    }\n  }\n\n  /**\n   * @return {!Element|!NativeInputType} The native text input from the\n   * host environment, or a dummy if none exists.\n   * @private\n   */\n  getNativeInput_() {\n    return this.adapter_.getNativeInput() ||\n    /** @type {!NativeInputType} */ ({\n      value: '',\n      disabled: false,\n      validity: {\n        badInput: false,\n        valid: true,\n      },\n    });\n  }\n}\n\nexport default MDCTextFieldFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst cssClasses = {\n  // Ripple is a special case where the \"root\" component is really a \"mixin\" of sorts,\n  // given that it's an 'upgrade' to an existing component. That being said it is the root\n  // CSS class that all other CSS classes derive from.\n  ROOT: 'mdc-ripple-upgraded',\n  UNBOUNDED: 'mdc-ripple-upgraded--unbounded',\n  BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',\n  FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',\n  FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',\n};\n\nconst strings = {\n  VAR_LEFT: '--mdc-ripple-left',\n  VAR_TOP: '--mdc-ripple-top',\n  VAR_FG_SIZE: '--mdc-ripple-fg-size',\n  VAR_FG_SCALE: '--mdc-ripple-fg-scale',\n  VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',\n  VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',\n};\n\nconst numbers = {\n  PADDING: 10,\n  INITIAL_ORIGIN_SCALE: 0.6,\n  DEACTIVATION_TIMEOUT_MS: 225, // Corresponds to $mdc-ripple-translate-duration (i.e. activation animation duration)\n  FG_DEACTIVATION_MS: 150, // Corresponds to $mdc-ripple-fade-out-duration (i.e. deactivation animation duration)\n  TAP_DELAY_MS: 300, // Delay between touch and simulated mouse events on touch devices\n};\n\nexport {cssClasses, strings, numbers};\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Ripple. Provides an interface for managing\n * - classes\n * - dom\n * - CSS variables\n * - position\n * - dimensions\n * - scroll position\n * - event handlers\n * - unbounded, active and disabled states\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\nclass MDCRippleAdapter {\n  /** @return {boolean} */\n  browserSupportsCssVars() {}\n\n  /** @return {boolean} */\n  isUnbounded() {}\n\n  /** @return {boolean} */\n  isSurfaceActive() {}\n\n  /** @return {boolean} */\n  isSurfaceDisabled() {}\n\n  /** @param {string} className */\n  addClass(className) {}\n\n  /** @param {string} className */\n  removeClass(className) {}\n\n  /** @param {!EventTarget} target */\n  containsEventTarget(target) {}\n\n  /**\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  registerInteractionHandler(evtType, handler) {}\n\n  /**\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  deregisterInteractionHandler(evtType, handler) {}\n\n  /**\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  registerDocumentInteractionHandler(evtType, handler) {}\n\n  /**\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  deregisterDocumentInteractionHandler(evtType, handler) {}\n\n  /**\n   * @param {!Function} handler\n   */\n  registerResizeHandler(handler) {}\n\n  /**\n   * @param {!Function} handler\n   */\n  deregisterResizeHandler(handler) {}\n\n  /**\n   * @param {string} varName\n   * @param {?number|string} value\n   */\n  updateCssVariable(varName, value) {}\n\n  /** @return {!ClientRect} */\n  computeBoundingRect() {}\n\n  /** @return {{x: number, y: number}} */\n  getWindowPageOffset() {}\n}\n\nexport default MDCRippleAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Stores result from supportsCssVariables to avoid redundant processing to detect CSS custom variable support.\n * @private {boolean|undefined}\n */\nlet supportsCssVariables_;\n\n/**\n * Stores result from applyPassive to avoid redundant processing to detect passive event listener support.\n * @private {boolean|undefined}\n */\nlet supportsPassive_;\n\n/**\n * @param {!Window} windowObj\n * @return {boolean}\n */\nfunction detectEdgePseudoVarBug(windowObj) {\n  // Detect versions of Edge with buggy var() support\n  // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/\n  const document = windowObj.document;\n  const node = document.createElement('div');\n  node.className = 'mdc-ripple-surface--test-edge-var-bug';\n  document.body.appendChild(node);\n\n  // The bug exists if ::before style ends up propagating to the parent element.\n  // Additionally, getComputedStyle returns null in iframes with display: \"none\" in Firefox,\n  // but Firefox is known to support CSS custom properties correctly.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  const computedStyle = windowObj.getComputedStyle(node);\n  const hasPseudoVarBug = computedStyle !== null && computedStyle.borderTopStyle === 'solid';\n  node.remove();\n  return hasPseudoVarBug;\n}\n\n/**\n * @param {!Window} windowObj\n * @param {boolean=} forceRefresh\n * @return {boolean|undefined}\n */\n\nfunction supportsCssVariables(windowObj, forceRefresh = false) {\n  if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {\n    return supportsCssVariables_;\n  }\n\n  const supportsFunctionPresent = windowObj.CSS && typeof windowObj.CSS.supports === 'function';\n  if (!supportsFunctionPresent) {\n    return;\n  }\n\n  const explicitlySupportsCssVars = windowObj.CSS.supports('--css-vars', 'yes');\n  // See: https://bugs.webkit.org/show_bug.cgi?id=154669\n  // See: README section on Safari\n  const weAreFeatureDetectingSafari10plus = (\n    windowObj.CSS.supports('(--css-vars: yes)') &&\n    windowObj.CSS.supports('color', '#00000000')\n  );\n\n  if (explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus) {\n    supportsCssVariables_ = !detectEdgePseudoVarBug(windowObj);\n  } else {\n    supportsCssVariables_ = false;\n  }\n  return supportsCssVariables_;\n}\n\n//\n/**\n * Determine whether the current browser supports passive event listeners, and if so, use them.\n * @param {!Window=} globalObj\n * @param {boolean=} forceRefresh\n * @return {boolean|{passive: boolean}}\n */\nfunction applyPassive(globalObj = window, forceRefresh = false) {\n  if (supportsPassive_ === undefined || forceRefresh) {\n    let isSupported = false;\n    try {\n      globalObj.document.addEventListener('test', null, {get passive() {\n        isSupported = true;\n      }});\n    } catch (e) { }\n\n    supportsPassive_ = isSupported;\n  }\n\n  return supportsPassive_ ? {passive: true} : false;\n}\n\n/**\n * @param {!Object} HTMLElementPrototype\n * @return {!Array<string>}\n */\nfunction getMatchesProperty(HTMLElementPrototype) {\n  return [\n    'webkitMatchesSelector', 'msMatchesSelector', 'matches',\n  ].filter((p) => p in HTMLElementPrototype).pop();\n}\n\n/**\n * @param {!Event} ev\n * @param {!{x: number, y: number}} pageOffset\n * @param {!ClientRect} clientRect\n * @return {!{x: number, y: number}}\n */\nfunction getNormalizedEventCoords(ev, pageOffset, clientRect) {\n  const {x, y} = pageOffset;\n  const documentX = x + clientRect.left;\n  const documentY = y + clientRect.top;\n\n  let normalizedX;\n  let normalizedY;\n  // Determine touch point relative to the ripple container.\n  if (ev.type === 'touchstart') {\n    normalizedX = ev.changedTouches[0].pageX - documentX;\n    normalizedY = ev.changedTouches[0].pageY - documentY;\n  } else {\n    normalizedX = ev.pageX - documentX;\n    normalizedY = ev.pageY - documentY;\n  }\n\n  return {x: normalizedX, y: normalizedY};\n}\n\nexport {supportsCssVariables, applyPassive, getMatchesProperty, getNormalizedEventCoords};\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCRippleAdapter from './adapter';\nimport {cssClasses, strings, numbers} from './constants';\nimport {getNormalizedEventCoords} from './util';\n\n/**\n * @typedef {!{\n *   isActivated: (boolean|undefined),\n *   hasDeactivationUXRun: (boolean|undefined),\n *   wasActivatedByPointer: (boolean|undefined),\n *   wasElementMadeActive: (boolean|undefined),\n *   activationEvent: Event,\n *   isProgrammatic: (boolean|undefined)\n * }}\n */\nlet ActivationStateType;\n\n/**\n * @typedef {!{\n *   activate: (string|undefined),\n *   deactivate: (string|undefined),\n *   focus: (string|undefined),\n *   blur: (string|undefined)\n * }}\n */\nlet ListenerInfoType;\n\n/**\n * @typedef {!{\n *   activate: function(!Event),\n *   deactivate: function(!Event),\n *   focus: function(),\n *   blur: function()\n * }}\n */\nlet ListenersType;\n\n/**\n * @typedef {!{\n *   x: number,\n *   y: number\n * }}\n */\nlet PointType;\n\n// Activation events registered on the root element of each instance for activation\nconst ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown'];\n\n// Deactivation events registered on documentElement when a pointer-related down event occurs\nconst POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup'];\n\n// Tracks activations that have occurred on the current frame, to avoid simultaneous nested activations\n/** @type {!Array<!EventTarget>} */\nlet activatedTargets = [];\n\n/**\n * @extends {MDCFoundation<!MDCRippleAdapter>}\n */\nclass MDCRippleFoundation extends MDCFoundation {\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  static get strings() {\n    return strings;\n  }\n\n  static get numbers() {\n    return numbers;\n  }\n\n  static get defaultAdapter() {\n    return {\n      browserSupportsCssVars: () => /* boolean - cached */ {},\n      isUnbounded: () => /* boolean */ {},\n      isSurfaceActive: () => /* boolean */ {},\n      isSurfaceDisabled: () => /* boolean */ {},\n      addClass: (/* className: string */) => {},\n      removeClass: (/* className: string */) => {},\n      containsEventTarget: (/* target: !EventTarget */) => {},\n      registerInteractionHandler: (/* evtType: string, handler: EventListener */) => {},\n      deregisterInteractionHandler: (/* evtType: string, handler: EventListener */) => {},\n      registerDocumentInteractionHandler: (/* evtType: string, handler: EventListener */) => {},\n      deregisterDocumentInteractionHandler: (/* evtType: string, handler: EventListener */) => {},\n      registerResizeHandler: (/* handler: EventListener */) => {},\n      deregisterResizeHandler: (/* handler: EventListener */) => {},\n      updateCssVariable: (/* varName: string, value: string */) => {},\n      computeBoundingRect: () => /* ClientRect */ {},\n      getWindowPageOffset: () => /* {x: number, y: number} */ {},\n    };\n  }\n\n  constructor(adapter) {\n    super(Object.assign(MDCRippleFoundation.defaultAdapter, adapter));\n\n    /** @private {number} */\n    this.layoutFrame_ = 0;\n\n    /** @private {!ClientRect} */\n    this.frame_ = /** @type {!ClientRect} */ ({width: 0, height: 0});\n\n    /** @private {!ActivationStateType} */\n    this.activationState_ = this.defaultActivationState_();\n\n    /** @private {number} */\n    this.initialSize_ = 0;\n\n    /** @private {number} */\n    this.maxRadius_ = 0;\n\n    /** @private {function(!Event)} */\n    this.activateHandler_ = (e) => this.activate_(e);\n\n    /** @private {function(!Event)} */\n    this.deactivateHandler_ = (e) => this.deactivate_(e);\n\n    /** @private {function(?Event=)} */\n    this.focusHandler_ = () => requestAnimationFrame(\n      () => this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED)\n    );\n\n    /** @private {function(?Event=)} */\n    this.blurHandler_ = () => requestAnimationFrame(\n      () => this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED)\n    );\n\n    /** @private {!Function} */\n    this.resizeHandler_ = () => this.layout();\n\n    /** @private {!{left: number, top:number}} */\n    this.unboundedCoords_ = {\n      left: 0,\n      top: 0,\n    };\n\n    /** @private {number} */\n    this.fgScale_ = 0;\n\n    /** @private {number} */\n    this.activationTimer_ = 0;\n\n    /** @private {number} */\n    this.fgDeactivationRemovalTimer_ = 0;\n\n    /** @private {boolean} */\n    this.activationAnimationHasEnded_ = false;\n\n    /** @private {!Function} */\n    this.activationTimerCallback_ = () => {\n      this.activationAnimationHasEnded_ = true;\n      this.runDeactivationUXLogicIfReady_();\n    };\n\n    /** @private {?Event} */\n    this.previousActivationEvent_ = null;\n  }\n\n  /**\n   * We compute this property so that we are not querying information about the client\n   * until the point in time where the foundation requests it. This prevents scenarios where\n   * client-side feature-detection may happen too early, such as when components are rendered on the server\n   * and then initialized at mount time on the client.\n   * @return {boolean}\n   * @private\n   */\n  isSupported_() {\n    return this.adapter_.browserSupportsCssVars();\n  }\n\n  /**\n   * @return {!ActivationStateType}\n   */\n  defaultActivationState_() {\n    return {\n      isActivated: false,\n      hasDeactivationUXRun: false,\n      wasActivatedByPointer: false,\n      wasElementMadeActive: false,\n      activationEvent: null,\n      isProgrammatic: false,\n    };\n  }\n\n  init() {\n    if (!this.isSupported_()) {\n      return;\n    }\n    this.registerRootHandlers_();\n\n    const {ROOT, UNBOUNDED} = MDCRippleFoundation.cssClasses;\n    requestAnimationFrame(() => {\n      this.adapter_.addClass(ROOT);\n      if (this.adapter_.isUnbounded()) {\n        this.adapter_.addClass(UNBOUNDED);\n      }\n      this.layoutInternal_();\n    });\n  }\n\n  destroy() {\n    if (!this.isSupported_()) {\n      return;\n    }\n    this.deregisterRootHandlers_();\n    this.deregisterDeactivationHandlers_();\n\n    const {ROOT, UNBOUNDED} = MDCRippleFoundation.cssClasses;\n    requestAnimationFrame(() => {\n      this.adapter_.removeClass(ROOT);\n      this.adapter_.removeClass(UNBOUNDED);\n      this.removeCssVars_();\n    });\n  }\n\n  /** @private */\n  registerRootHandlers_() {\n    ACTIVATION_EVENT_TYPES.forEach((type) => {\n      this.adapter_.registerInteractionHandler(type, this.activateHandler_);\n    });\n    this.adapter_.registerInteractionHandler('focus', this.focusHandler_);\n    this.adapter_.registerInteractionHandler('blur', this.blurHandler_);\n    this.adapter_.registerResizeHandler(this.resizeHandler_);\n  }\n\n  /**\n   * @param {!Event} e\n   * @private\n   */\n  registerDeactivationHandlers_(e) {\n    if (e.type === 'keydown') {\n      this.adapter_.registerInteractionHandler('keyup', this.deactivateHandler_);\n    } else {\n      POINTER_DEACTIVATION_EVENT_TYPES.forEach((type) => {\n        this.adapter_.registerDocumentInteractionHandler(type, this.deactivateHandler_);\n      });\n    }\n  }\n\n  /** @private */\n  deregisterRootHandlers_() {\n    ACTIVATION_EVENT_TYPES.forEach((type) => {\n      this.adapter_.deregisterInteractionHandler(type, this.activateHandler_);\n    });\n    this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);\n    this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);\n    this.adapter_.deregisterResizeHandler(this.resizeHandler_);\n  }\n\n  /** @private */\n  deregisterDeactivationHandlers_() {\n    this.adapter_.deregisterInteractionHandler('keyup', this.deactivateHandler_);\n    POINTER_DEACTIVATION_EVENT_TYPES.forEach((type) => {\n      this.adapter_.deregisterDocumentInteractionHandler(type, this.deactivateHandler_);\n    });\n  }\n\n  /** @private */\n  removeCssVars_() {\n    const {strings} = MDCRippleFoundation;\n    Object.keys(strings).forEach((k) => {\n      if (k.indexOf('VAR_') === 0) {\n        this.adapter_.updateCssVariable(strings[k], null);\n      }\n    });\n  }\n\n  /**\n   * @param {?Event} e\n   * @private\n   */\n  activate_(e) {\n    if (this.adapter_.isSurfaceDisabled()) {\n      return;\n    }\n\n    const activationState = this.activationState_;\n    if (activationState.isActivated) {\n      return;\n    }\n\n    // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction\n    const previousActivationEvent = this.previousActivationEvent_;\n    const isSameInteraction = previousActivationEvent && e && previousActivationEvent.type !== e.type;\n    if (isSameInteraction) {\n      return;\n    }\n\n    activationState.isActivated = true;\n    activationState.isProgrammatic = e === null;\n    activationState.activationEvent = e;\n    activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : (\n      e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'pointerdown'\n    );\n\n    const hasActivatedChild =\n      e && activatedTargets.length > 0 && activatedTargets.some((target) => this.adapter_.containsEventTarget(target));\n    if (hasActivatedChild) {\n      // Immediately reset activation state, while preserving logic that prevents touch follow-on events\n      this.resetActivationState_();\n      return;\n    }\n\n    if (e) {\n      activatedTargets.push(/** @type {!EventTarget} */ (e.target));\n      this.registerDeactivationHandlers_(e);\n    }\n\n    requestAnimationFrame(() => {\n      // This needs to be wrapped in an rAF call b/c web browsers\n      // report active states inconsistently when they're called within\n      // event handling code:\n      // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971\n      // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741\n      activationState.wasElementMadeActive = (e && e.type === 'keydown') ? this.adapter_.isSurfaceActive() : true;\n      if (activationState.wasElementMadeActive) {\n        this.animateActivation_();\n      } else {\n        // Reset activation state immediately if element was not made active.\n        this.activationState_ = this.defaultActivationState_();\n      }\n\n      // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples\n      activatedTargets = [];\n    });\n  }\n\n  /**\n   * @param {?Event=} event Optional event containing position information.\n   */\n  activate(event = null) {\n    this.activate_(event);\n  }\n\n  /** @private */\n  animateActivation_() {\n    const {VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END} = MDCRippleFoundation.strings;\n    const {FG_DEACTIVATION, FG_ACTIVATION} = MDCRippleFoundation.cssClasses;\n    const {DEACTIVATION_TIMEOUT_MS} = MDCRippleFoundation.numbers;\n\n    let translateStart = '';\n    let translateEnd = '';\n\n    if (!this.adapter_.isUnbounded()) {\n      const {startPoint, endPoint} = this.getFgTranslationCoordinates_();\n      translateStart = `${startPoint.x}px, ${startPoint.y}px`;\n      translateEnd = `${endPoint.x}px, ${endPoint.y}px`;\n    }\n\n    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);\n    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);\n    // Cancel any ongoing activation/deactivation animations\n    clearTimeout(this.activationTimer_);\n    clearTimeout(this.fgDeactivationRemovalTimer_);\n    this.rmBoundedActivationClasses_();\n    this.adapter_.removeClass(FG_DEACTIVATION);\n\n    // Force layout in order to re-trigger the animation.\n    this.adapter_.computeBoundingRect();\n    this.adapter_.addClass(FG_ACTIVATION);\n    this.activationTimer_ = setTimeout(() => this.activationTimerCallback_(), DEACTIVATION_TIMEOUT_MS);\n  }\n\n  /**\n   * @private\n   * @return {{startPoint: PointType, endPoint: PointType}}\n   */\n  getFgTranslationCoordinates_() {\n    const {activationEvent, wasActivatedByPointer} = this.activationState_;\n\n    let startPoint;\n    if (wasActivatedByPointer) {\n      startPoint = getNormalizedEventCoords(\n        /** @type {!Event} */ (activationEvent),\n        this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect()\n      );\n    } else {\n      startPoint = {\n        x: this.frame_.width / 2,\n        y: this.frame_.height / 2,\n      };\n    }\n    // Center the element around the start point.\n    startPoint = {\n      x: startPoint.x - (this.initialSize_ / 2),\n      y: startPoint.y - (this.initialSize_ / 2),\n    };\n\n    const endPoint = {\n      x: (this.frame_.width / 2) - (this.initialSize_ / 2),\n      y: (this.frame_.height / 2) - (this.initialSize_ / 2),\n    };\n\n    return {startPoint, endPoint};\n  }\n\n  /** @private */\n  runDeactivationUXLogicIfReady_() {\n    // This method is called both when a pointing device is released, and when the activation animation ends.\n    // The deactivation animation should only run after both of those occur.\n    const {FG_DEACTIVATION} = MDCRippleFoundation.cssClasses;\n    const {hasDeactivationUXRun, isActivated} = this.activationState_;\n    const activationHasEnded = hasDeactivationUXRun || !isActivated;\n\n    if (activationHasEnded && this.activationAnimationHasEnded_) {\n      this.rmBoundedActivationClasses_();\n      this.adapter_.addClass(FG_DEACTIVATION);\n      this.fgDeactivationRemovalTimer_ = setTimeout(() => {\n        this.adapter_.removeClass(FG_DEACTIVATION);\n      }, numbers.FG_DEACTIVATION_MS);\n    }\n  }\n\n  /** @private */\n  rmBoundedActivationClasses_() {\n    const {FG_ACTIVATION} = MDCRippleFoundation.cssClasses;\n    this.adapter_.removeClass(FG_ACTIVATION);\n    this.activationAnimationHasEnded_ = false;\n    this.adapter_.computeBoundingRect();\n  }\n\n  resetActivationState_() {\n    this.previousActivationEvent_ = this.activationState_.activationEvent;\n    this.activationState_ = this.defaultActivationState_();\n    // Touch devices may fire additional events for the same interaction within a short time.\n    // Store the previous event until it's safe to assume that subsequent events are for new interactions.\n    setTimeout(() => this.previousActivationEvent_ = null, MDCRippleFoundation.numbers.TAP_DELAY_MS);\n  }\n\n  /**\n   * @param {?Event} e\n   * @private\n   */\n  deactivate_(e) {\n    const activationState = this.activationState_;\n    // This can happen in scenarios such as when you have a keyup event that blurs the element.\n    if (!activationState.isActivated) {\n      return;\n    }\n\n    const state = /** @type {!ActivationStateType} */ (Object.assign({}, activationState));\n\n    if (activationState.isProgrammatic) {\n      const evtObject = null;\n      requestAnimationFrame(() => this.animateDeactivation_(evtObject, state));\n      this.resetActivationState_();\n    } else {\n      this.deregisterDeactivationHandlers_();\n      requestAnimationFrame(() => {\n        this.activationState_.hasDeactivationUXRun = true;\n        this.animateDeactivation_(e, state);\n        this.resetActivationState_();\n      });\n    }\n  }\n\n  /**\n   * @param {?Event=} event Optional event containing position information.\n   */\n  deactivate(event = null) {\n    this.deactivate_(event);\n  }\n\n  /**\n   * @param {Event} e\n   * @param {!ActivationStateType} options\n   * @private\n   */\n  animateDeactivation_(e, {wasActivatedByPointer, wasElementMadeActive}) {\n    if (wasActivatedByPointer || wasElementMadeActive) {\n      this.runDeactivationUXLogicIfReady_();\n    }\n  }\n\n  layout() {\n    if (this.layoutFrame_) {\n      cancelAnimationFrame(this.layoutFrame_);\n    }\n    this.layoutFrame_ = requestAnimationFrame(() => {\n      this.layoutInternal_();\n      this.layoutFrame_ = 0;\n    });\n  }\n\n  /** @private */\n  layoutInternal_() {\n    this.frame_ = this.adapter_.computeBoundingRect();\n    const maxDim = Math.max(this.frame_.height, this.frame_.width);\n\n    // Surface diameter is treated differently for unbounded vs. bounded ripples.\n    // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately\n    // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically\n    // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter\n    // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via\n    // `overflow: hidden`.\n    const getBoundedRadius = () => {\n      const hypotenuse = Math.sqrt(Math.pow(this.frame_.width, 2) + Math.pow(this.frame_.height, 2));\n      return hypotenuse + MDCRippleFoundation.numbers.PADDING;\n    };\n\n    this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius();\n\n    // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform\n    this.initialSize_ = maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE;\n    this.fgScale_ = this.maxRadius_ / this.initialSize_;\n\n    this.updateLayoutCssVars_();\n  }\n\n  /** @private */\n  updateLayoutCssVars_() {\n    const {\n      VAR_FG_SIZE, VAR_LEFT, VAR_TOP, VAR_FG_SCALE,\n    } = MDCRippleFoundation.strings;\n\n    this.adapter_.updateCssVariable(VAR_FG_SIZE, `${this.initialSize_}px`);\n    this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);\n\n    if (this.adapter_.isUnbounded()) {\n      this.unboundedCoords_ = {\n        left: Math.round((this.frame_.width / 2) - (this.initialSize_ / 2)),\n        top: Math.round((this.frame_.height / 2) - (this.initialSize_ / 2)),\n      };\n\n      this.adapter_.updateCssVariable(VAR_LEFT, `${this.unboundedCoords_.left}px`);\n      this.adapter_.updateCssVariable(VAR_TOP, `${this.unboundedCoords_.top}px`);\n    }\n  }\n\n  /** @param {boolean} unbounded */\n  setUnbounded(unbounded) {\n    const {UNBOUNDED} = MDCRippleFoundation.cssClasses;\n    if (unbounded) {\n      this.adapter_.addClass(UNBOUNDED);\n    } else {\n      this.adapter_.removeClass(UNBOUNDED);\n    }\n  }\n}\n\nexport default MDCRippleFoundation;\n","export function BasePlugin (components) { \n  return {\n    version: '__VERSION__',\n    install: (vm) => {\n      for (let key in components) {\n        let component = components[key]\n          vm.component(component.name,component)\n      }\n    },\n    components\n  } \n}\n\n","import MDCRippleFoundation from '@material/ripple/foundation.js'\nimport {supportsCssVariables, getMatchesProperty, applyPassive} from '@material/ripple/util'\n\nexport class RippleBase extends MDCRippleFoundation {\n\n  static get MATCHES () {\n    /* global HTMLElement */\n    return RippleBase._matches ||\n      ( RippleBase._matches = getMatchesProperty(HTMLElement.prototype))\n  }\n\n  static isSurfaceActive (ref) {\n    return ref[RippleBase.MATCHES](':active')\n  }\n\n  constructor (vm, options) {\n    super(Object.assign({\n      browserSupportsCssVars: () => {\n        return supportsCssVariables(window)\n      },\n      isUnbounded: () => {\n        return false\n      },\n      isSurfaceActive: () => {\n        return vm.$el[RippleBase.MATCHES](':active')\n      },\n      isSurfaceDisabled: () => {\n        return vm.disabled\n      },\n      addClass (className) {\n        vm.$set(vm.classes, className, true)\n      },\n      removeClass (className) {\n        vm.$delete(vm.classes, className)\n      },\n      containsEventTarget: (target) => vm.$el.contains(target),\n      registerInteractionHandler: (evt, handler) => {\n        vm.$el.addEventListener(evt, handler)\n      },\n      deregisterInteractionHandler: (evt, handler) => {\n        vm.$el.removeEventListener(evt, handler)\n      },\n      registerDocumentInteractionHandler: (evtType, handler) =>\n        document.documentElement.addEventListener(evtType, handler, applyPassive()),\n      deregisterDocumentInteractionHandler: (evtType, handler) =>\n        document.documentElement.removeEventListener(evtType, handler, applyPassive()),\n      registerResizeHandler: (handler) => {\n        return window.addEventListener('resize', handler)\n      },\n      deregisterResizeHandler: (handler) => {\n        return window.removeEventListener('resize', handler)\n      },\n      updateCssVariable: (varName, value) => {\n        vm.$set(vm.styles, varName, value)\n      },\n      computeBoundingRect: () => {\n        return vm.$el.getBoundingClientRect()\n      },\n      getWindowPageOffset: () => {\n        return ({x: window.pageXOffset, y: window.pageYOffset})\n      },\n    }, options))\n  }\n}\n\nexport const RippleMixin = {\n  data () {\n    return {\n      classes: {},\n      styles: {}\n    }\n  },\n  mounted () {\n    this.ripple = new RippleBase(this)\n    this.ripple.init()\n  },\n  beforeDestroy () {\n    this.ripple.destroy()\n  }\n}  ","<template>\r\n  <div class=\"mdc-textfield-wrapper\" :style=\"{width:fullwidth?'100%':undefined}\">\r\n\r\n    <div ref=\"root\" :class=\"rootClasses\">\r\n\r\n      <i ref=\"icon\" v-if=\"!!hasLeadingIcon\"\r\n        tabindex=\"0\" \r\n        class=\"mdc-text-field__icon\"  \r\n        :class=\"hasLeadingIcon.classes\">\r\n        <slot name=\"leading-icon\">{{ hasLeadingIcon.content }}</slot>\r\n      </i>\r\n\r\n      <textarea ref=\"input\" v-if=\"multiline\"\r\n        v-on=\"$listeners\"\r\n        v-bind=\"inputAttrs\"\r\n        :class=\"inputClasses\"\r\n        @input=\"updateValue($event.target.value)\"\r\n        :minlength=\"minlength\" :maxlength=\"maxlength\"\r\n        :placeholder=\"inputPlaceHolder\"\r\n        :aria-label=\"inputPlaceHolder\"\r\n        :aria-controls=\"inputAriaControls\"\r\n        :rows=\"rows\" :cols=\"cols\" \r\n        ></textarea>\r\n\r\n      <input ref=\"input\" v-else\r\n        v-on=\"$listeners\" \r\n        v-bind=\"inputAttrs\"\r\n        :class=\"inputClasses\"\r\n        @input=\"updateValue($event.target.value)\"\r\n        :type=\"type\"\r\n        :minlength=\"minlength\" :maxlength=\"maxlength\"\r\n        :placeholder=\"inputPlaceHolder\"\r\n        :aria-label=\"inputPlaceHolder\"\r\n        :aria-controls=\"inputAriaControls\" \r\n        />\r\n\r\n      <label ref=\"label\" :class=\"labelClassesUpgraded\" :for=\"_uid\"  v-if=\"hasLabel\">\r\n        {{ label }}\r\n      </label>\r\n\r\n      <i ref=\"icon\" v-if=\"!!hasTrailingIcon\"\r\n        tabindex=\"0\" \r\n        class=\"mdc-text-field__icon\"  \r\n        :class=\"hasTrailingIcon.classes\">\r\n        <slot name=\"trailing-icon\">{{ hasTrailingIcon.content }}</slot>\r\n      </i>\r\n\r\n      <div ref=\"outline\" class=\"mdc-text-field__outline\" v-if=\"hasOutline\">\r\n        <svg>\r\n          <path class=\"mdc-text-field__outline-path\" :d=\"outlinePathAttr\" />\r\n        </svg>\r\n      </div>\r\n      <div ref=\"outlineIdle\" class=\"mdc-text-field__idle-outline\" v-if=\"hasOutline\"></div>\r\n      <div ref=\"bottom\" :class=\"bottomClasses\" v-if=\"hasBottomLine\"></div>\r\n\r\n    </div>\r\n\r\n    <p ref=\"help\" :id=\"'help-'+_uid\" :class=\"helpClasses\"\r\n      aria-hidden=\"true\" v-if=\"helptext\">\r\n      {{ helptext  }}\r\n    </p>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MDCTextfieldFoundation from '@material/textfield/foundation'\r\nimport MDCLineRippleFoundation from '@material/line-ripple/foundation'\r\nimport MDCTextFieldHelperTextFoundation from '@material/textfield/helper-text/foundation'\r\nimport MDCTextFieldIconFoundation from '@material/textfield/icon/foundation';\r\nimport MDCTextFieldLabelFoundation from '@material/textfield/label/foundation';\r\nimport MDCTextFieldOutlineFoundation from '@material/textfield/outline/foundation';\r\n\r\nimport {\r\n  extractIconProp, \r\n  DispatchFocusMixin, CustomElementMixin} from '../base'\r\nimport {RippleBase} from '../ripple'\r\n\r\nexport default {\r\n  name: 'mdc-textfield',\r\n  mixins: [CustomElementMixin, DispatchFocusMixin],\r\n  model: {\r\n    prop: 'value',\r\n    event: 'model'\r\n  },\r\n  props: {\r\n    value: String,\r\n    type: {\r\n      type: String,\r\n      default: 'text',\r\n      validator: function (value) {\r\n        return ['text', 'email', 'search', 'password', 'tel', 'url']\r\n          .indexOf(value) !== -1\r\n      }\r\n    },\r\n    dense: Boolean,\r\n    label: String,\r\n    helptext: String,\r\n    helptextPersistent: Boolean,\r\n    helptextValidation: Boolean,\r\n    box: Boolean,\r\n    outline: Boolean,\r\n    disabled: Boolean,\r\n    required: Boolean,\r\n    valid: {type: Boolean, default: undefined}, \r\n    fullwidth: Boolean,\r\n    multiline: Boolean,\r\n    leadingIcon: [String, Array, Object],\r\n    trailingIcon: [String, Array, Object],\r\n    size: { type: [Number, String], default: 20 },\r\n    minlength: { type: [Number, String], default: undefined },\r\n    maxlength: { type: [Number, String], default: undefined },\r\n    rows: { type: [Number, String], default: 8 },\r\n    cols: { type: [Number, String], default: 40 },\r\n    \r\n    // other input props  \r\n    name: String,\r\n    readonly: Boolean,\r\n    autocomplete: Boolean,\r\n    autofocus: Boolean,\r\n  },\r\n  data: function () {\r\n    return {\r\n      text: this.value,\r\n      rootClasses: {\r\n        'mdc-textfield': true,\r\n        'mdc-text-field': true,\r\n        'mdc-text-field--upgraded': true,\r\n        'mdc-text-field--disabled': this.disabled,\r\n        'mdc-text-field--dense': this.dense,\r\n        'mdc-text-field--fullwidth': this.fullwidth,\r\n        'mdc-text-field--textarea': this.multiline,\r\n        'mdc-text-field--box': !this.fullwidth && this.box,\r\n        'mdc-text-field--outlined': !this.fullwidth && this.outline,\r\n      },\r\n      inputClasses: {\r\n        'mdc-text-field__input': true\r\n      },\r\n      labelClasses: {\r\n        'mdc-text-field__label': true\r\n      },\r\n      bottomClasses: {\r\n        'mdc-line-ripple': true\r\n      },\r\n      helpClasses: {\r\n        'mdc-text-field-helper-text': true,\r\n        'mdc-text-field-helper-text--persistent': this.helptextPersistent,\r\n        'mdc-text-field-helper-text--validation-msg': this.helptextValidation\r\n      },\r\n      outlinePathAttr: undefined,\r\n    }\r\n  },\r\n  watch:  {\r\n    disabled () {\r\n      this.foundation && this.foundation.setDisabled(this.disabled)\r\n    },\r\n    required () {\r\n      this.foundation && this.foundation.setRequired(this.disabled)\r\n    },\r\n    valid () {\r\n      if (typeof this.valid !== \"undefined\") {\r\n        this.foundation && this.foundation.setValid(this.valid)\r\n      }\r\n    },\r\n    dense () {\r\n        this.$set(this.rootClasses, 'mdc-text-field--dense', this.dense)\r\n    },\r\n    helptextPersistent () {\r\n      this.helperTextFoundation \r\n        && this.helperTextFoundation.setPersistent(this.helptextPersistent)\r\n    },\r\n    helptextValidation () {\r\n      this.helperTextFoundation \r\n        && this.helperTextFoundation.setValidation(this.helptextValidation)\r\n    },\r\n    value (value) {\r\n      if (this.foundation) {\r\n        if (value !== this.foundation.getValue()) {\r\n          this.foundation.setValue(value)\r\n        }\r\n      } \r\n    }\r\n  },\r\n  methods: {\r\n    updateValue (value) {\r\n      this.$emit('model', value)\r\n    },\r\n    focus () {\r\n      this.$refs.input && this.$refs.input.focus() \r\n    },\r\n    blur () {\r\n      this.$refs.input && this.$refs.input.blur() \r\n    }\r\n  },\r\n  computed: {\r\n    inputAttrs () {\r\n      let { name, readonly, autocomplete, autofocus} = this\r\n      return { name, readonly, autocomplete, autofocus};\r\n    },\r\n    inputPlaceHolder () {\r\n      return this.fullwidth ? this.label : undefined\r\n    },\r\n    inputAriaControls () {\r\n      return this.help ? 'help-' + this._uid: undefined\r\n    },\r\n    hasLabel () {\r\n      return !this.fullwidth && this.label\r\n    },\r\n    hasOutline () {\r\n      return !this.fullwidth && this.outline \r\n    },\r\n    hasBottomLine () {\r\n      return !this.hasOutline && !this.multiline\r\n    },\r\n    hasLeadingIcon () {\r\n      if ((this.leadingIcon || this.$slots['leading-icon'])\r\n         && !(this.trailingIcon || this.$slots['trailing-icon'])) {\r\n        return this.leadingIcon ? extractIconProp(this.leadingIcon) : {}\r\n      }\r\n      return false\r\n    },\r\n    hasTrailingIcon () {\r\n      if (this.trailingIcon || this.$slots['trailing-icon']) {\r\n        return this.trailingIcon ? extractIconProp(this.trailingIcon) : {}\r\n      }\r\n      return false\r\n    },\r\n    labelClassesUpgraded () {\r\n      return Object.assign(this.labelClasses, {\r\n        'mdc-text-field__label--float-above': this.value\r\n      })\r\n    }\r\n  },\r\n  mounted () {\r\n\r\n    if (this.$refs.bottom) {\r\n      this.bottomLineFoundation = new MDCLineRippleFoundation({\r\n        addClass: (className) => {\r\n          this.$set(this.bottomClasses, className, true)\r\n        },\r\n        removeClass: (className) => {\r\n          this.$delete(this.bottomClasses, className)\r\n        },\r\n        hasClass: (className) => {\r\n          this.bottomClasses.classList.contains(className)\r\n        },\r\n        setAttr: (name, value) => {\r\n          this.$refs.bottom.setAttribute(name, value)\r\n        },\r\n        registerEventHandler: (evtType, handler) => {\r\n          this.$refs.bottom.addEventListener(evtType, handler)\r\n        },\r\n        deregisterEventHandler: (evtType, handler) => {\r\n          this.$refs.bottom.removeEventListener(evtType, handler)\r\n        },\r\n      })\r\n      this.bottomLineFoundation.init()\r\n    }\r\n\r\n    if (this.$refs.help) {\r\n      this.helperTextFoundation = new MDCTextFieldHelperTextFoundation({\r\n        addClass: (className) => {\r\n          this.$set(this.helpClasses, className, true)\r\n        },\r\n        removeClass: (className) => {\r\n          this.$delete(this.helpClasses, className)\r\n        },\r\n        hasClass: (className) => {\r\n          return this.$refs.help.classList.contains(className)\r\n        },\r\n        setAttr: (name, value) => {\r\n          this.$refs.help.setAttribute(name, value)\r\n        },\r\n        removeAttr: (name) => {\r\n          this.$refs.help.removeAttribute(name)\r\n        },\r\n        setContent: ( /*content*/) => {\r\n          // help text get's updated from {{helptext}}\r\n          // this.$refs.help.textContent = content;\r\n        }\r\n      })\r\n      this.helperTextFoundation.init()\r\n    }\r\n\r\n    if (this.$refs.icon) {\r\n      if (this.hasLeadingIcon){\r\n        this.$set(this.rootClasses, 'mdc-text-field--with-leading-icon', true)\r\n      } else if (this.hasTrailingIcon) {\r\n        this.$set(this.rootClasses, 'mdc-text-field--with-trailing-icon', true)\r\n      }\r\n\r\n      this.iconFoundation = new MDCTextFieldIconFoundation({\r\n        setAttr: (attr, value) => this.$refs.icon.setAttribute(attr, value),\r\n        registerInteractionHandler: (evtType, handler) => {\r\n          this.$refs.icon.addEventListener(evtType, handler)\r\n        },\r\n        deregisterInteractionHandler: (evtType, handler) => {\r\n          this.$refs.icon.removeEventListener(evtType, handler)\r\n        },\r\n        notifyIconAction: () => this.$emit('icon-action')\r\n      })\r\n      this.iconFoundation.init()\r\n    }    \r\n    \r\n    if (this.$refs.label) {\r\n      this.labelFoundation = new MDCTextFieldLabelFoundation({\r\n        addClass: (className) => {\r\n          this.$set(this.labelClasses, className, true)\r\n        },\r\n        removeClass: (className) => {\r\n          this.$delete(this.labelClasses, className)\r\n        },\r\n        getWidth: () => this.$refs.label.offsetWidth,\r\n      })\r\n      this.labelFoundation.init()\r\n    }    \r\n\r\n    if (this.$refs.outline) {\r\n      this.outlineFoundation = new MDCTextFieldOutlineFoundation({\r\n        getWidth: () => this.$refs.outline.offsetWidth,\r\n        getHeight: () => this.$refs.outline.offsetHeight,\r\n        setOutlinePathAttr: (value) => {\r\n          this.outlinePathAttr = value\r\n        },\r\n        getIdleOutlineStyleValue: (propertyName) => {\r\n          const idleOutlineElement = this.$refs.outlineIdle;\r\n          if (idleOutlineElement) {\r\n            return window.getComputedStyle(idleOutlineElement)\r\n              .getPropertyValue(propertyName);\r\n          }\r\n        },\r\n      })\r\n      this.outlineFoundation.init()\r\n    }    \r\n\r\n    this.foundation = new MDCTextfieldFoundation({\r\n      addClass: (className) => {\r\n        this.$set(this.rootClasses, className, true)\r\n      },\r\n      removeClass: (className) => {\r\n        this.$delete(this.rootClasses, className)\r\n      },\r\n      hasClass: (className) => {\r\n        this.$refs.root.classList.contains(className)\r\n      },\r\n      registerTextFieldInteractionHandler: (evtType, handler) => {\r\n        this.$refs.root.addEventListener(evtType, handler)\r\n      },\r\n      deregisterTextFieldInteractionHandler: (evtType, handler) => {\r\n        this.$refs.root.removeEventListener(evtType, handler)\r\n      },\r\n      isFocused: () => {\r\n        return document.activeElement === this.$refs.input\r\n      },\r\n      isRtl: () => window.getComputedStyle(this.$refs.root).getPropertyValue('direction') === 'rtl',     \r\n      deactivateLineRipple: () => {\r\n        if (this.bottom) {\r\n          this.bottom.deactivate();\r\n        }\r\n      },\r\n      activateLineRipple: () => {\r\n        if (this.bottom) {\r\n          this.bottom.activate();\r\n        }\r\n      },\r\n      setLineRippleTransformOrigin: (normalizedX) => {\r\n        if (this.bottom) {\r\n          this.bottom.setRippleCenter(normalizedX);\r\n        }\r\n      },\r\n      registerInputInteractionHandler: (evtType, handler) => {\r\n        this.$refs.input.addEventListener(evtType, handler)\r\n      },\r\n      deregisterInputInteractionHandler: (evtType, handler) => {\r\n        this.$refs.input.removeEventListener(evtType, handler)\r\n      },\r\n      getNativeInput: () => {\r\n        return this.$refs.input\r\n      },\r\n      \r\n    }, {\r\n      bottomLine: this.bottomLineFoundation,\r\n      helperText: this.helperTextFoundation,\r\n      icon: this.iconFoundation,\r\n      label: this.labelFoundation,\r\n      outline: this.outlineFoundation,\r\n    })\r\n\r\n\r\n    this.foundation.init()\r\n    this.foundation.setValue(this.value)\r\n    this.foundation.setDisabled(this.disabled)\r\n    this.foundation.setRequired(this.required)\r\n    if (typeof this.valid !== \"undefined\") {\r\n      this.foundation.setValid(this.valid)\r\n    }\r\n\r\n    if (this.textbox) {\r\n      this.ripple = new RippleBase(this)\r\n      this.ripple.init()\r\n    }\r\n\r\n  },\r\n  beforeDestroy () {\r\n    this.foundation && this.foundation.destroy()\r\n    this.bottomLineFoundation && this.bottomLineFoundation.destroy()\r\n    this.helperTextFoundation && this.helperTextFoundation.destroy()\r\n    this.iconFoundation && this.iconFoundation.destroy()\r\n    this.labelFoundation && this.labelFoundation.destroy()\r\n    this.outlineFoundation && this.outlineFoundation.destroy()\r\n    this.ripple && this.ripple.destroy()\r\n  }\r\n}\r\n\r\n</script>\r\n","export function autoInit (plugin) {\n  // Auto-install\n  let _Vue = null\n  if (typeof window !== 'undefined') {\n    _Vue = window.Vue\n  } else if (typeof global !== 'undefined') {\n    /*global global*/\n    _Vue = global.Vue\n  }\n  if (_Vue) {\n    _Vue.use(plugin)\n  }\n}\n  ","import './styles.scss'\nimport {autoInit} from '../base'\nimport plugin from './index.js'\nexport default plugin\n\nautoInit(plugin)\n"],"names":["CustomElementMixin","createElement","context","props","is","tag","data","children","extractIconProp","iconProp","material-icons","Array","reduce","result","value","babelHelpers.extends","className","split","textContent","DispatchFocusMixin","hasFocus","_active","_this","dispatchFocusEvent","setTimeout","_this2","this","$el","document","activeElement","contains","$emit","addEventListener","onFocusEvent","onBlurEvent","onMouseDown","onMouseUp","removeEventListener","MDCFoundation","adapter","adapter_","cssClasses","attr","evtType","handler","MDCLineRippleFoundation","defaultAdapter","transitionEndHandler_","evt","handleTransitionEnd","registerEventHandler","deregisterEventHandler","removeClass","LINE_RIPPLE_DEACTIVATING","addClass","LINE_RIPPLE_ACTIVE","xCoordinate","attributeString","setAttr","isDeactivating","hasClass","propertyName","strings","content","MDCTextFieldHelperTextFoundation","setContent","isPersistent","HELPER_TEXT_PERSISTENT","isValidation","HELPER_TEXT_VALIDATION_MSG","removeAttr","ARIA_HIDDEN","inputIsValid","helperTextIsPersistent","validationMsgNeedsDisplay","ROLE","hide_","MDCTextFieldIconFoundation","interactionHandler_","handleInteraction","forEach","registerInteractionHandler","deregisterInteractionHandler","_this3","disabled","type","key","keyCode","notifyIconAction","MDCTextFieldLabelFoundation","getWidth","isValid","isFocused","LABEL_SHAKE","isBadInput","LABEL_FLOAT_ABOVE","MDCTextFieldOutlineFoundation","labelWidth","isRtl","radiusStyleValue","getIdleOutlineStyleValue","radius","parseFloat","width","height","getHeight","cornerWidth","leadingStrokeLength","Math","abs","paddedLabelWidth","pathMiddle","path","setOutlinePathAttr","normalizedX","numbers","MDCTextFieldFoundation","foundationMap","helperText_","helperText","icon_","icon","label_","label","outline_","outline","isFocused_","receivedUserInput_","useCustomValidityChecking_","isValid_","inputFocusHandler_","activateFocus","inputBlurHandler_","deactivateFocus","inputInputHandler_","autoCompleteFocus","setPointerXOffset_","setTransformOrigin","textFieldInteractionHandler_","handleTextFieldInteraction","UPGRADED","getValue","styleFloat","isBadInput_","registerInputInteractionHandler","registerTextFieldInteractionHandler","deregisterInputInteractionHandler","deregisterTextFieldInteractionHandler","getNativeInput","labelScale","DENSE","DENSE_LABEL_SCALE","LABEL_SCALE","updateSvgPath","styleFocused_","activateLineRipple","updateOutline","styleShake","showToScreenReader","targetClientRect","target","getBoundingClientRect","evtCoords","clientX","clientY","left","setLineRippleTransformOrigin","deactivateLineRipple","shouldRemoveLabelFloat","getNativeInput_","styleValidity_","isNativeInputValid_","styleDisabled_","required","isRequired","validity","badInput","valid","INVALID","setValidity","FOCUSED","isDisabled","DISABLED","setDisabled","varName","supportsCssVariables_","supportsPassive_","applyPassive","globalObj","window","forceRefresh","undefined","isSupported","passive","e","components","ACTIVATION_EVENT_TYPES","POINTER_DEACTIVATION_EVENT_TYPES","activatedTargets","MDCRippleFoundation","layoutFrame_","frame_","activationState_","defaultActivationState_","initialSize_","maxRadius_","activateHandler_","activate_","deactivateHandler_","deactivate_","focusHandler_","requestAnimationFrame","BG_FOCUSED","blurHandler_","resizeHandler_","layout","unboundedCoords_","fgScale_","activationTimer_","fgDeactivationRemovalTimer_","activationAnimationHasEnded_","activationTimerCallback_","runDeactivationUXLogicIfReady_","previousActivationEvent_","browserSupportsCssVars","isSupported_","registerRootHandlers_","ROOT","UNBOUNDED","isUnbounded","layoutInternal_","deregisterRootHandlers_","deregisterDeactivationHandlers_","removeCssVars_","_this4","registerResizeHandler","registerDocumentInteractionHandler","_this5","_this6","deregisterResizeHandler","deregisterDocumentInteractionHandler","_this7","keys","k","indexOf","updateCssVariable","isSurfaceDisabled","activationState","isActivated","previousActivationEvent","isProgrammatic","activationEvent","wasActivatedByPointer","length","some","_this9","containsEventTarget","resetActivationState_","push","registerDeactivationHandlers_","wasElementMadeActive","isSurfaceActive","animateActivation_","event","VAR_FG_TRANSLATE_START","VAR_FG_TRANSLATE_END","FG_DEACTIVATION","FG_ACTIVATION","DEACTIVATION_TIMEOUT_MS","translateStart","translateEnd","getFgTranslationCoordinates_","startPoint","endPoint","x","y","rmBoundedActivationClasses_","computeBoundingRect","_this10","ev","pageOffset","clientRect","documentX","documentY","normalizedY","getWindowPageOffset","top","changedTouches","pageX","pageY","hasDeactivationUXRun","FG_DEACTIVATION_MS","_this12","TAP_DELAY_MS","state","_this13","animateDeactivation_","maxDim","max","sqrt","pow","_this15","PADDING","INITIAL_ORIGIN_SCALE","updateLayoutCssVars_","VAR_FG_SIZE","VAR_LEFT","VAR_TOP","VAR_FG_SCALE","round","unbounded","RippleBase","vm","options","windowObj","CSS","supports","explicitlySupportsCssVars","weAreFeatureDetectingSafari10plus","node","body","appendChild","computedStyle","getComputedStyle","hasPseudoVarBug","borderTopStyle","remove","detectEdgePseudoVarBug","supportsCssVariables","MATCHES","$set","classes","$delete","documentElement","styles","pageXOffset","pageYOffset","ref","_matches","HTMLElementPrototype","HTMLElement","prototype","filter","p","pop","render","String","Boolean","default","Object","Number","dense","fullwidth","multiline","box","helptextPersistent","helptextValidation","foundation","setRequired","setValid","rootClasses","helperTextFoundation","setPersistent","setValidation","setValue","$refs","input","focus","blur","name","readonly","autocomplete","autofocus","help","_uid","hasOutline","leadingIcon","$slots","trailingIcon","labelClasses","bottom","bottomLineFoundation","bottomClasses","classList","setAttribute","init","helpClasses","removeAttribute","hasLeadingIcon","hasTrailingIcon","iconFoundation","labelFoundation","offsetWidth","outlineFoundation","offsetHeight","outlinePathAttr","idleOutlineElement","outlineIdle","getPropertyValue","MDCTextfieldFoundation","root","deactivate","activate","setRippleCenter","textbox","ripple","destroy","component","plugin","_Vue","Vue","global","use"],"mappings":"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"}